// This is an autogenerated file from Firebase Studio.
import NextAuth, { type NextAuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';

// Mock user database (replace with actual database logic in a real app)
const users = [
  { id: '1', name: 'Test User', email: 'test@example.com', password: 'password123' },
  { id: '2', name: 'Jane Doe', email: 'jane@example.com', password: 'password' },
];

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'email', placeholder: 'name@example.com' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }
        const user = users.find((u) => u.email === credentials.email);

        // IMPORTANT: In a real application, you MUST hash and compare passwords securely.
        // Storing plain text passwords is a major security vulnerability.
        if (user && user.password === credentials.password) {
          // Return an object that will be encoded in the JWT
          return { id: user.id, name: user.name, email: user.email };
        }
        // If you return null then an error will be displayed advising the user to check their details.
        return null;
      },
    }),
  ],
  session: {
    strategy: 'jwt',
  },
  pages: {
    signIn: '/login', // Redirect users to this page for sign in
    // error: '/login', // Redirect users to this page on error (optional)
  },
  callbacks: {
    async jwt({ token, user }) {
      // Persist the user id to the token right after signin
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      // Send properties to the client, like an access_token and user id from a provider.
      if (session.user) {
        session.user.id = token.id as string;
      }
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
